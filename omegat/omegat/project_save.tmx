<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.1_0_99222d65" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>:ref:`thecoqcommands`.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145020Z" creationid="yamarten" creationdate="20181104T145020Z">
        <seg>:ref:`thecoqcommands`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@binders } : @sort := @ident₀ {?</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191507Z" creationid="eldesh" creationdate="20191221T191507Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@binders }`.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191456Z" creationid="eldesh" creationdate="20191221T191456Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A *caveat*, however, is that records cannot appear in mutually inductive (or co-inductive) definitions.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T201335Z" creationid="eldesh" creationdate="20191221T200543Z">
        <seg>注意点として、しかしながら、レコードは相互帰納的 (または余帰納的) 定義の中に現れることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A commented version of sources of the |Coq| standard library (including only the specifications, the proofs are removed) is available at https://coq.inria.fr/stdlib/.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150204Z" creationid="yamarten" creationdate="20181104T150204Z">
        <seg>|Coq| 標準ライブラリのコメント付きソースコード (仕様のみで、証明を省いたもの)は https://coq.inria.fr/stdlib/ で閲覧できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A companion volume to this reference manual, the |Coq| Tutorial, is aimed at gently introducing new users to developing proofs in |Coq| without assuming prior knowledge of type theory.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145957Z" creationid="yamarten" creationdate="20181104T145957Z">
        <seg>このマニュアルと対を成す |Coq| チュートリアルは、新規ユーザが型理論の知識なしに |Coq| で証明を構築できるようになるまで、優しく導入することを目的としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A text file `INSTALL` that comes with the sources explains how to install |Coq|.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150123Z" creationid="yamarten" creationdate="20181104T150123Z">
        <seg>ソースに付属するテキストファイル `INSTALL` では、 |Coq| をインストールする方法について説明しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Addendum</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150239Z" creationid="yamarten" creationdate="20181104T150239Z">
        <seg>付録</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All logical judgments in |Coq| are typing judgments.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T101610Z" creationid="yamarten" creationdate="20181007T100201Z">
        <seg>|Coq| における論理的判断は全て型付け判断です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All services of the |Coq| proof assistant are accessible by interpretation of a command language called *the vernacular*.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144825Z" creationid="yamarten" creationdate="20181007T112922Z">
        <seg>|Coq| が提供する全てのサービスは、 *Vernacular* と呼ばれるコマンド言語を読み込ませることで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, the following syntax allows creating objects by using named fields, as shown in this grammar.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T192325Z" creationid="eldesh" creationdate="20191221T192325Z">
        <seg>この文法で示されるように、代わりに以下の構文で名前付きフィールドを使うことでオブジェクトを作ることが出来ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An alternative syntax for projections based on a dot notation is available:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T194622Z" creationid="eldesh" creationdate="20191221T194622Z">
        <seg>射影のためドット記法に基づいた代替構文が使用可能です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Automatic generation of induction schemes for non-recursive records defined with the ``Record`` keyword can be activated with the ``Nonrecursive Elimination Schemes`` option (see :ref:`proofschemes-induction-principles`).</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T201328Z" creationid="eldesh" creationdate="20191221T201328Z">
        <seg>``Record`` キーワードによって定義された非-再帰的レコードの帰納スキームの自動生成は ``Nonrecursive Elimination Schemes`` オプション (:ref:`proofschemes-induction-principles` 参照) によって有効化することができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calculus of Inductive Constructions</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181110T055945Z" creationid="yamarten" creationdate="20181110T055945Z">
        <seg>Calculus of Inductive Constructions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chapters :ref:`gallinaspecificationlanguage` and :ref:`extensionsofgallina` describe the concrete syntax as well as the meaning of programs, theorems and proofs in the Calculus of Inductive Constructions.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145106Z" creationid="yamarten" creationdate="20181104T145106Z">
        <seg>:ref:`gallinaspecificationlanguage` および :ref:`extensionsofgallina` の章では、構文および Calculus of Inductive Constructions におけるプログラムや証明・定理の意味について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chapter :ref:`calculusofinductiveconstructions` is a mathematical description of the formalism.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145128Z" creationid="yamarten" creationdate="20181104T145128Z">
        <seg>:ref:`calculusofinductiveconstructions` の章は数学の形式的な説明です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chapter :ref:`thecoqlibrary` describes the standard library of |Coq|.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145114Z" creationid="yamarten" creationdate="20181104T145114Z">
        <seg>:ref:`thecoqlibrary` の章では |Coq| の標準ライブラリについて説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chapter :ref:`themodulesystem` describes the module system.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145130Z" creationid="yamarten" creationdate="20181104T145130Z">
        <seg>:ref:`themodulesystem` の章ではモジュールシステムについて説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <note>"requests to the environment"が指すものがわかっていない。環境ってどの辺りなんだろう。宣言とかの話なのか、Setみたいなより広い話を含んでいるのか。</note>
      <tuv lang="EN-US">
        <seg>Chapter :ref:`vernacularcommands` presents all commands (we call them *vernacular commands*) that are not directly related to interactive proving: requests to the environment, complete or partial evaluation, loading and compiling files.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145429Z" creationid="yamarten" creationdate="20181104T145429Z">
        <seg>:ref:`vernacularcommands` の章では、対話的証明と直接的には関係のないコマンド (*Vernacular コマンド*) を全て挙げます。コマンドは、環境への要求、完全/部分的な評価、ファイルの読み込みやコンパイルなどを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <note>the chapter とは？</note>
      <tuv lang="EN-US">
        <seg>Coercions and records in section :ref:`coercions-classes-as-records` of the chapter devoted to coercions.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T205044Z" creationid="eldesh" creationdate="20191221T204147Z">
        <seg>そのチャプターのセクション :ref:`coercions-classes-as-records` のコアーションとレコードはコアーションに費やされています。</seg>
      </tuv>
    </tu>
    <tu>
      <note>唐突に「Coq」から外れる縦棒。どうも付けるとsmallcapクラスが付くっぽいのだけど、スモールキャピタルにはなっているわけでもなく、特に意味は無さそう。
</note>
      <tuv lang="EN-US">
        <seg>Coq has an interactive mode in which commands are interpreted as the user types them in from the keyboard and a compiled mode where commands are processed from a file.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T114048Z" creationid="yamarten" creationdate="20181007T113510Z">
        <seg>Coq には、ユーザが入力した端からコマンドを実行していく対話モードと、ファイルに書かれたコマンドを順に実行していくコンパイルモードがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During the definition of the one-constructor inductive definition, all the errors of inductive definitions, as described in Section :ref:`gallina-inductive-definitions`, may also occur.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T203528Z" creationid="eldesh" creationdate="20191221T203528Z">
        <seg>コンストラクタが一つの帰納的定義を定義しているとき、セクション :ref:`gallina-inductive-definitions` で説明される帰納的定義の全てのエラーも起こる可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples of tactics are described in Chapter :ref:`detailedexamplesoftactics`.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145621Z" creationid="yamarten" creationdate="20181104T145621Z">
        <seg>タクティックの具体例は :ref:`detailedexamplesoftactics` の章で説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extensions of |Gallina|</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T184133Z" creationid="eldesh" creationdate="20191221T184133Z">
        <seg>|Gallina| の拡張</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, :token:`binders` are parameters of the record.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T184039Z" creationid="eldesh" creationdate="20191221T184039Z">
        <seg>最後に、:token:`binders` はレコードのパラメータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, Chapter :ref:`coqintegrateddevelopmentenvironment` describes CoqIDE.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145816Z" creationid="yamarten" creationdate="20181104T145816Z">
        <seg>最後に、 :ref:`coqintegrateddevelopmentenvironment` の章で、 CoqIDE について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, the |SSR| proof language is presented in Chapter :ref:`thessreflectprooflanguage`.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145630Z" creationid="yamarten" creationdate="20181104T145630Z">
        <seg>最後に、証明言語 |SSR| について :ref:`thessreflectprooflanguage` の章で説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <note>compile mode じゃなかったのかよ。</note>
      <tuv lang="EN-US">
        <seg>First in Chapter :ref:`thecoqcommands`, the usage of `coqc` (batch mode) and `coqtop` (interactive mode) with their options is described.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145714Z" creationid="yamarten" creationdate="20181104T145714Z">
        <seg>まず、 :ref:`thecoqcommands` の章で、`coqc` (コンパイルモード) と `coqtop` (対話モード) の使い方およびオプションについて説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First the macro generates a variant type definition with just one constructor: :n:`Variant @ident {?</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191437Z" creationid="eldesh" creationdate="20191221T191223Z">
        <seg>まずマクロは高々一つのコンストラクタをもつバリアント型定義を生成します: :n:`Variant @ident { @binders } : @sort := @ident₀ { @binders }` 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a given field :token:`ident`, its type is :g:`forall binders, type`.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T183456Z" creationid="eldesh" creationdate="20191221T183448Z">
        <seg>あるフィールド :token:`ident` が与えられた場合、その型は :g:`forall binders, type` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance, we might have: :n:`Record @ident @binders : @sort := { @ident₁ : @type₁ ; @ident₂ := @term₂ ; @ident₃ : @type₃ }`.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T190954Z" creationid="eldesh" creationdate="20191221T185415Z">
        <seg>例えば、:n:`Record @ident @binders : @sort := { @ident₁ : @type₁ ; @ident₂ := @term₂ ; @ident₃ : @type₃ }` があるとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How to read this book</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144922Z" creationid="yamarten" creationdate="20181104T144922Z">
        <seg>この文書の読み方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How to start and stop proofs, do multiple proofs in parallel is explained in Chapter :ref:`proofhandling`.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145435Z" creationid="yamarten" creationdate="20181104T145435Z">
        <seg>どのように証明を始め、終わればいいのか、どうすれば証明を並行して進めることができるかは、 :ref:`proofhandling` の章で説明しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If :token:`sort` is omitted, the default sort is `\Type`.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T183210Z" creationid="eldesh" creationdate="20191221T183103Z">
        <seg>:token:`sort` が省略された場合は、デフォルトのソートは `\Type` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a field is named `_` then no projection is built for it.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T194250Z" creationid="eldesh" creationdate="20191221T194250Z">
        <seg>もしフィールドの名前が `_` ならばそれのための射影は構築されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is omitted, the default name ``Build_``\ :token:`ident`, where :token:`ident` is the record name, is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T183052Z" creationid="eldesh" creationdate="20191221T183052Z">
        <seg>それが省略された場合、デフォルトの名称である ``Build_``\ :token:`ident` ここで :token:`ident` はレコード名、が使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If set, use the record syntax (shown above) as the default display format.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193126Z" creationid="eldesh" creationdate="20191221T193126Z">
        <seg>セットすると、レコード構文 (上記) をデフォルト表示形式として使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Chapter :ref:`tactics`, all commands that realize one or more steps of the proof are presented: we call them *tactics*.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145557Z" creationid="yamarten" creationdate="20181104T145557Z">
        <seg>:ref:`tactics` の章では、証明の1つまたは複数のステップを成すコマンド (*タクティック*) を全て挙げます。</seg>
      </tuv>
    </tu>
    <tu>
      <note>とっくの昔に消えているような気がする。</note>
      <tuv lang="EN-US">
        <seg>In a second step, the user can read also the tutorial on recursive types (document `RecTutorial.ps`).</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150007Z" creationid="yamarten" creationdate="20181104T150007Z">
        <seg>その後は、再帰型についてのチュートリアル (`RecTutorial.ps`) を読むのもいいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In each case, `term` is the object projected and the other arguments are the parameters of the inductive type.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T200629Z" creationid="eldesh" creationdate="20191221T195516Z">
        <seg>いずれの場合も、`term` は射影されたオブジェクトであり、他の引数は帰納型のパラメータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, the :cmd:`Record` macro is more general than the usual record types, since it allows also for “manifest” expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T165910Z" creationid="eldesh" creationdate="20191221T165600Z">
        <seg>実際は、:cmd:`Record` マクロは普通のレコード型より一般的であり、”マニフェスト” 式のためのものでもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In interactive mode, users can develop their theories and proofs step by step, and query the system for available theorems and definitions.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T122200Z" creationid="yamarten" creationdate="20181007T122200Z">
        <seg>対話モードでは、ユーザは順を追って証明を構築したり、利用できる定理や定義をシステムに問い合わせたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In our example:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T194409Z" creationid="eldesh" creationdate="20191221T194349Z">
        <seg>我々の扱っている例では:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T171148Z" creationid="eldesh" creationdate="20191221T171148Z">
        <seg>この式では:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the fourth part more practical tools are documented.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145717Z" creationid="yamarten" creationdate="20181104T145650Z">
        <seg>第4部はより実用的なツールについて文書化しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this sense, the :cmd:`Record` construction allows defining “signatures”.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T165956Z" creationid="eldesh" creationdate="20191221T165956Z">
        <seg>この場合、:cmd:`Record` は ”シグネチャ” の定義をすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexes</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150216Z" creationid="yamarten" creationdate="20181104T150216Z">
        <seg>索引</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Induction schemes are automatically generated for inductive records.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T201102Z" creationid="eldesh" creationdate="20191221T201102Z">
        <seg>帰納スキームは帰納的レコードについて自動的に生成される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Installation</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150013Z" creationid="yamarten" creationdate="20181104T150013Z">
        <seg>インストール方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T034937Z" creationid="yamarten" creationdate="20181007T033312Z">
        <seg>はじめに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be activated for printing with</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T194813Z" creationid="eldesh" creationdate="20191221T194813Z">
        <seg>それは以下によって表示を有効にすることが出来ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can happen that the definition of a projection is impossible.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T201457Z" creationid="eldesh" creationdate="20191221T201457Z">
        <seg>射影の定義が不可能なことが起こり得ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is divided in six chapters.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145403Z" creationid="yamarten" creationdate="20181104T145403Z">
        <seg>ここは6つの章に分かれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It provides a specification language named |Gallina|.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T080633Z" creationid="yamarten" creationdate="20181007T080342Z">
        <seg>Coqは、 |Gallina| と呼ばれる仕様記述言語を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its syntax is described in the grammar below.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T165519Z" creationid="eldesh" creationdate="20191221T165438Z">
        <seg>構文は以下で説明しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let us define the rational :math:`1/2`:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191921Z" creationid="eldesh" creationdate="20191221T191921Z">
        <seg>有理数 :math:`1/2` を定義してみましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let us now see the work done by the ``Record`` macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191542Z" creationid="eldesh" creationdate="20191221T190420Z">
        <seg>``Record`` マクロによって行われる動作を見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>License</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150242Z" creationid="yamarten" creationdate="20181104T150242Z">
        <seg>ライセンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Links to several tutorials can be found at https://coq.inria.fr/documentation and https://github.com/coq/coq/wiki#coq-tutorials</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T035722Z" creationid="yamarten" creationdate="20181007T035722Z">
        <seg>https://coq.inria.fr/documentation や https://github.com/coq/coq/wiki#coq-tutorials には、幾つかのチュートリアルへのリンクがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>List of additional documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145841Z" creationid="yamarten" creationdate="20181104T145841Z">
        <seg>その他の文書一覧</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More generally, a record may have explicitly defined (a.k.a.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T190931Z" creationid="eldesh" creationdate="20191221T185102Z">
        <seg>より一般的には、レコードは明示的に定義されたフィールド (別名 マニフェスト) を持ち得ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, |Coq|’s compiler provides an output file containing a compact representation of its input.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144902Z" creationid="yamarten" creationdate="20181104T144902Z">
        <seg>さらに、 |Coq| コンパイラは、入力のコンパクトな表現を持つ出力ファイルを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nonetheless, the manual has some structure that is explained below.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145002Z" creationid="yamarten" creationdate="20181104T145002Z">
        <seg>とはいえ、このマニュアルも以下のような構造を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optionally, you can enhance it with the minor mode Company-Coq :cite:`Pit16` (see https://github.com/cpitclaudel/company-coq).</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150319Z" creationid="yamarten" creationdate="20181104T150319Z">
        <seg>また、マイナーモード Company-Coq :cite:`Pit16` (https://github.com/cpitclaudel/company-coq) で拡張することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Options A and B are not elected.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150310Z" creationid="yamarten" creationdate="20181104T150310Z">
        <seg>オプションAおよびBは選択しない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Practical tools</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150232Z" creationid="yamarten" creationdate="20181104T150232Z">
        <seg>実用ツール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preamble</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150219Z" creationid="yamarten" creationdate="20181104T150219Z">
        <seg>はじめに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Project-Id-Version: Coq 8.8.2
Report-Msgid-Bugs-To:
POT-Creation-Date: 2018-10-07 10:53+0900
PO-Revision-Date: 2018-10-07 10:53+0900
Last-Translator: Automatically generated
Language-Team: none
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Language: ja
Plural-Forms: nplurals=1; plural=0;</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T035013Z" creationid="yamarten" creationdate="20181007T035013Z">
        <seg>Project-Id-Version: Coq 8.8.2
Report-Msgid-Bugs-To:
POT-Creation-Date: 2018-10-07 10:53+0900
PO-Revision-Date: 2018-10-07 10:53+0900
Last-Translator: Automatically generated
Language-Team: none
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Language: ja
Plural-Forms: nplurals=1; plural=0;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Project-Id-Version: Coq 8.8.2
Report-Msgid-Bugs-To: 
POT-Creation-Date: 2018-10-07 10:53+0900
PO-Revision-Date: 2018-10-07 10:53+0900
Last-Translator: Automatically generated
Language-Team: none
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Language: ja
Plural-Forms: nplurals=1; plural=0;</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T035446Z" creationid="yamarten" creationdate="20181007T035446Z">
        <seg>Project-Id-Version: Coq 8.8.2
Report-Msgid-Bugs-To: 
POT-Creation-Date: 2018-10-07 10:53+0900
PO-Revision-Date: 2018-10-07 10:53+0900
Last-Translator: Automatically generated
Language-Team: none
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Language: ja
Plural-Forms: nplurals=1; plural=0;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proof-General is available at https://proofgeneral.github.io/.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150315Z" creationid="yamarten" creationdate="20181104T150315Z">
        <seg>Proof-General は https://proofgeneral.github.io/から入手可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Record types</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T164758Z" creationid="eldesh" creationdate="20191221T164758Z">
        <seg>レコード型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Records  cannot  be  defined  as  part  of  mutually  inductive  (or co-inductive) definitions,  whether with records only  or mixed with standard definitions.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T203221Z" creationid="eldesh" creationdate="20191221T203221Z">
        <seg>レコードは、レコードのみであっても標準定義との混合であっても、相互帰納的 (または余帰納的) 定義の一部として定義することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Records defined with the ``Record`` keyword are not allowed to be recursive (references to the record's name in the type of its field raises an  error).</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T200639Z" creationid="eldesh" creationdate="20191221T195837Z">
        <seg>``Record`` キーワードで定義されたレコードは再帰することは許されません (レコード名への参照がそのフィールドの型の中にあるとエラーが起きる)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remark here that the fields ``Rat_bottom_cond`` depends on the field ``bottom`` and ``Rat_irred_cond`` depends on both ``top`` and ``bottom``.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191027Z" creationid="eldesh" creationdate="20191221T190253Z">
        <seg>ここで注意すべきはフィールド ``Rat_bottom_cond`` がフィールド ``bottom`` に依存し、 ``Rat_irred_cond`` が ``top`` と ``bottom`` の両方に依存していることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remark that the type of a particular identifier may depend on a previously-given identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T183949Z" creationid="eldesh" creationdate="20191221T183949Z">
        <seg>注目すべきは、特定の識別子の型は前に与えられた識別子に依存し得ることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the table of contents for a complete list.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145836Z" creationid="yamarten" creationdate="20181104T145836Z">
        <seg>全ての項目を知りたい場合は、目次を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifies a set of qualids which are displayed as constructors.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193816Z" creationid="eldesh" creationdate="20191221T193816Z">
        <seg>コンストラクタとして表示される qualid の集合を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <note>qualids って何？</note>
      <tuv lang="EN-US">
        <seg>Specifies a set of qualids which are displayed as records.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193637Z" creationid="eldesh" creationdate="20191221T193600Z">
        <seg>レコードとして表示される qualid の集合を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax of Record projections</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T194831Z" creationid="eldesh" creationdate="20191221T194831Z">
        <seg>レコード射影構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table of contents</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150213Z" creationid="yamarten" creationdate="20181104T150213Z">
        <seg>目次</seg>
      </tuv>
    </tu>
    <tu>
      <note>as well asのニュアンスを落としてるので、「仕様記述言語のはずでは？」となりそうな気もする</note>
      <tuv lang="EN-US">
        <seg>Terms of |Gallina| can represent programs as well as properties of these programs and proofs of these properties.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T081041Z" creationid="yamarten" creationdate="20181007T081041Z">
        <seg>|Gallina| の項はプログラム・プログラムの性質・性質の証明を表現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The :cmd:`Record` construction is a macro allowing the definition of records as is done in many programming languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T184600Z" creationid="eldesh" creationdate="20191221T165051Z">
        <seg>:cmd:`Record` は多くのプログラミング言語で行われるようにレコードを定義できるようにするマクロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Gallina specification language</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181110T115315Z" creationid="yamarten" creationdate="20181110T115315Z">
        <seg>仕様記述言語 Gallina</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `coqtop` read-eval-print-loop can also be used directly, for debugging purposes.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144829Z" creationid="yamarten" creationdate="20181104T111736Z">
        <seg>デバッグのために、 read-eval-print-loop である `coqtop` を直接用いることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The body of `ident` uses an incorrect elimination for `ident` (see :cmd:`Fixpoint` and :ref:`Destructors`).</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T202633Z" creationid="eldesh" creationdate="20191221T202037Z">
        <seg>`ident` のボディーは `ident` に不正な除去を使っている (:cmd:`Fixpoint` と :ref:`Destructors` 参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiled mode acts as a proof checker taking a file containing a whole development in order to ensure its correctness.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144849Z" creationid="yamarten" creationdate="20181104T144849Z">
        <seg>コンパイルモードは、開発したもの全てを受け取り、その正当性を保証する証明チェッカとして機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiled mode is run with the `coqc` command.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144910Z" creationid="yamarten" creationdate="20181104T144910Z">
        <seg>コンパイルモードは `coqc` コマンドで実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The corresponding grammar rules are given in the preceding grammar.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T200603Z" creationid="eldesh" creationdate="20191221T195009Z">
        <seg>対応する文法規則は前述の文法の中で与えられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fields do not have to be in any particular order, nor do they have to be all present if the missing ones can be inferred or prompted for (see :ref:`programs`).</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193302Z" creationid="eldesh" creationdate="20191221T192858Z">
        <seg>フィールドは特定の順序になっている必要はなく、もし足りないものが推論され得るか入力を促される (:ref:`programs` 参照) ならば、それらは全てが存在する必要もありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fifth part documents a number of advanced features, including coercions, canonical structures, typeclasses, program extraction, and specialized solvers and tactics.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145822Z" creationid="yamarten" creationdate="20181104T145822Z">
        <seg>第5部では、型強制・正準構造・型クラス・プログラム抽出・特殊なソルバとタクティックといった、いくつかの高度な機能について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first part describes the specification language, |Gallina|.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145011Z" creationid="yamarten" creationdate="20181104T145011Z">
        <seg>第1部では、仕様記述言語 |Gallina| について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following settings let you control the display format for types:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193010Z" creationid="eldesh" creationdate="20191221T193010Z">
        <seg>以下の設定は型の表示形式をコントロールします:</seg>
      </tuv>
    </tu>
    <tu>
      <note>クレジットへのリンクは張らないのか？</note>
      <tuv lang="EN-US">
        <seg>The history of this formalism as well as pointers to related work are provided in a separate chapter; see *Credits*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The identifiers inside the brackets are the names of fields.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T183245Z" creationid="eldesh" creationdate="20191221T183245Z">
        <seg>ブラケットの中の識別子はフィールド名です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The interactive mode is generally run with the help of an IDE, such as CoqIDE, documented in :ref:`coqintegrateddevelopmentenvironment`, Emacs with Proof-General :cite:`Asp00` [#PG]_, or jsCoq to run Coq in your browser (see https://github.com/ejgallego/jscoq).</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T161431Z" creationid="yamarten" creationdate="20181104T111701Z">
        <seg>対話モードは一般的に, CoqIDE (:ref:`coqintegrateddevelopmentenvironment` にて記載)やProof-General :cite:`Asp00` [#PG]_ を入れた Emacs 、またはブラウザ上で動作する jsCoq (https://github.com/ejgallego/jscoq) のようなIDEの助けを借りて実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The language</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150221Z" creationid="yamarten" creationdate="20181104T150221Z">
        <seg>言語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The language to combine these tactics into complex proof strategies is given in Chapter :ref:`ltac`.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145611Z" creationid="yamarten" creationdate="20181104T145611Z">
        <seg>これらのタクティックを組み合わせて複雑な証明戦略を作るための言語については :ref:`ltac` の章で述べています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro generates also, when it is possible, the projection functions for destructuring an object of type `\ident`.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T194125Z" creationid="eldesh" creationdate="20191221T194125Z">
        <seg>そのマクロはさらに、それが可能な時は `\ident` 型のオブジェクトをデストラクトするための射影関数をも生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name `ident` already exists in the environment (see :cmd:`Axiom`).</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T202047Z" creationid="eldesh" creationdate="20191221T201857Z">
        <seg>名前 `ident` が既に環境中に存在する (:cmd:`Axiom` 参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The optional identifier following ``:=`` is the name of its constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T182809Z" creationid="eldesh" creationdate="20191221T182809Z">
        <seg>``:=`` に続くオプショナルな識別子はそのコンストラクタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The proof engine</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150224Z" creationid="yamarten" creationdate="20181104T150224Z">
        <seg>証明エンジン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The record name `ident` appears in the type of its fields, but uses the keyword ``Record``.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T202802Z" creationid="eldesh" creationdate="20191221T202744Z">
        <seg>レコード名 `ident` がそのフィールドの型の中に現れているが、``Record`` キーワードを使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second part describes the proof engine.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145355Z" creationid="yamarten" creationdate="20181104T145355Z">
        <seg>第2部では、証明エンジンについて説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of rational numbers may be defined as:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191017Z" creationid="eldesh" creationdate="20191221T190001Z">
        <seg>有理数の集合は以下のように定義されるかもしれません:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The third part describes how to extend the syntax of |Coq| in Chapter :ref:`syntaxextensionsandinterpretationscopes` and how to define new induction principles in Chapter :ref:`proofschemes`.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145639Z" creationid="yamarten" creationdate="20181104T145639Z">
        <seg>第3部は、 :ref:`syntaxextensionsandinterpretationscopes` の章で|Coq| の構文の拡張方法を、 :ref:`proofschemes` の章で帰納法の原理を新たに定義する方法を説明しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the projections `ident` depends on previous projections which themselves could not be defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T202454Z" creationid="eldesh" creationdate="20191221T202454Z">
        <seg>`ident` の射影の型がそれ自身の以前の射影に依存していると定義できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underlying formal language of |Coq| is a *Calculus of Inductive Constructions* (|Cic|) whose inference rules are presented in this chapter.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181110T110830Z" creationid="yamarten" creationdate="20181110T110830Z">
        <seg>|Coq| の基礎となる形式言語は *Calculus of Inductive Constructions* (|Cic|) と呼ばれる。この章では、 |Cic| の推論規則について説明する。</seg>
      </tuv>
    </tu>
    <tu>
      <note>「compiles to its specification」ってなんだ。</note>
      <tuv lang="EN-US">
        <seg>The very heart of the |Coq| system is the type checking algorithm that checks the correctness of proofs, in other words that checks that a program complies to its specification.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T102409Z" creationid="yamarten" creationdate="20181007T101423Z">
        <seg>|Coq| システムの心臓部は型検査アルゴリズムで、これは証明の正しさを検査します。言い換えれば、このアルゴリズムはプログラムがその仕様に準拠するか検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The |Coq| standard library</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150201Z" creationid="yamarten" creationdate="20181104T150201Z">
        <seg>|Coq| 標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The |Coq| system is designed to develop mathematical proofs, and especially to write formal specifications, programs and to verify that programs are correct with respect to their specifications.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T040420Z" creationid="yamarten" creationdate="20181007T035904Z">
        <seg>|Coq| は、数学的な証明を構築するためにデザインされました。特に、形式仕様やプログラムを記述したり、プログラムが仕様に沿っていることを検証することを目的としています。</seg>
      </tuv>
    </tu>
    <tu>
      <note>distributionのいい感じの訳語が欲しい。</note>
      <tuv lang="EN-US">
        <seg>Then, in Chapter :ref:`utilities`, various utilities that come with the |Coq| distribution are presented.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145806Z" creationid="yamarten" creationdate="20181104T145806Z">
        <seg>次に、 :ref:`utilities` の章で、 |Coq| ディストリビューションに付属する様々なユーティリティについて説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <note>オプション(Setするやつ)についての索引は無視？</note>
      <tuv lang="EN-US">
        <seg>There is a global index, and a number of specific indexes for tactics, vernacular commands, and error messages and warnings.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144950Z" creationid="yamarten" creationdate="20181104T144950Z">
        <seg>総合索引に加え、タクティックやコマンド、エラーメッセージ・警告に特化した索引があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There may be three reasons:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T201816Z" creationid="eldesh" creationdate="20191221T201816Z">
        <seg>3通りの可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These projection functions are given the names of the corresponding fields.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T194207Z" creationid="eldesh" creationdate="20191221T194207Z">
        <seg>これらの射影関数は対応するフィールド名から与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This document is the Reference Manual of the |Coq| proof assistant.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T034931Z" creationid="yamarten" creationdate="20181007T033738Z">
        <seg>この文書は証明アシスタント |Coq| のリファレンスマニュアルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a Reference Manual, so it is not intended for continuous reading.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144930Z" creationid="yamarten" creationdate="20181104T144930Z">
        <seg>この文書はリファレンスマニュアルであり、通読するものではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <note>documentとdocumentationが区別できてないせいでちょっとよろしくない感じになっている。</note>
      <tuv lang="EN-US">
        <seg>This manual does not contain all the documentation the user may need about |Coq|.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145934Z" creationid="yamarten" creationdate="20181104T145918Z">
        <seg>このマニュアルは |Coq| についてユーザが求める文書が全て含まれているわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <note>http://www.opensource.jp/openpub/ に準拠している。敬体に直した方が自然かもしれない。</note>
      <tuv lang="EN-US">
        <seg>This material (the Coq Reference Manual) may be distributed only subject to the terms and conditions set forth in the Open Publication License, v1.0 or later (the latest version is presently available at http://www.opencontent.org/openpub).</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150301Z" creationid="yamarten" creationdate="20181104T150301Z">
        <seg>この作品 (Coq リファレンスマニュアル) はオープン・パブリケーション利用許諾契約書 (v1.0 かそれ以降) で指定された条件と制約に従う限り配布することができる(契約書の最新の版は現在のところ http://www.opencontent.org/openpub/で入手可能である)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This message is followed by an explanation of this impossibility.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T201627Z" creationid="eldesh" creationdate="20191221T201627Z">
        <seg>このメッセージにはこの不可能性の説明が続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This syntax can also be used for pattern matching.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193922Z" creationid="eldesh" creationdate="20191221T193922Z">
        <seg>この構文はパターンマッチングに使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus the order of the fields is important.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T184013Z" creationid="eldesh" creationdate="20191221T184013Z">
        <seg>従ってフィールドの順序は重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To build an object of type :n:`@ident`, one should provide the constructor :n:`@ident₀` with the appropriate number of terms filling the fields of the record.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191844Z" creationid="eldesh" creationdate="20191221T191844Z">
        <seg>:n:`@ident` 型のオブジェクトを構築するには、レコードのフィールドを埋める適切な数の項を伴った :n:`@ident₀` コンストラクタを提供する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define recursive records, one can use the ``Inductive`` and ``CoInductive`` keywords, resulting in an inductive or co-inductive record.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T200647Z" creationid="eldesh" creationdate="20191221T200319Z">
        <seg>再帰的レコードを定義するためには、``Inductive`` と ``CoInductive`` キーワードを使うことができ、結果は帰納的または余帰納的レコードになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To start using Coq, it is advised to first read a tutorial.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T034900Z" creationid="yamarten" creationdate="20181007T034900Z">
        <seg>Coqを初めて使う方は、まずチュートリアルを読むことをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tutorial</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145951Z" creationid="yamarten" creationdate="20181104T145951Z">
        <seg>チュートリアル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use  the keyword ``Inductive`` or ``CoInductive`` instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T202830Z" creationid="eldesh" creationdate="20191221T202820Z">
        <seg>代わりにキーワード ``Inductive`` または ``CoInductive`` を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the :cmd:`Add @table` and :cmd:`Remove @table` commands to update the set of qualids.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193734Z" creationid="eldesh" creationdate="20191221T193734Z">
        <seg>qualid の集合を更新するには :cmd:`Add @table` と :cmd:`Remove @table` コマンドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>User extensions</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T150228Z" creationid="yamarten" creationdate="20181104T150228Z">
        <seg>ユーザ拡張</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the so-called *Curry-Howard isomorphism*, programs, properties and proofs are formalized in the same language called *Calculus of Inductive Constructions*, that is a :math:`\lambda`-calculus with a rich type system.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T094032Z" creationid="yamarten" creationdate="20181007T082717Z">
        <seg>*カリー・ハワード同型対応* を使えば、プログラム・性質・証明は全て *Calculus of Inductive Constructions* という一つの言語で表現できます。これは :math:`\lambda` 計算にリッチな型システムが付いたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Various informations can be found in the following documents:</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T145944Z" creationid="yamarten" creationdate="20181104T145944Z">
        <seg>以下の文書からも様々な情報を得ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We describe here extensions of |Gallina|’s syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T184246Z" creationid="eldesh" creationdate="20191221T184246Z">
        <seg>ここでは |Gallina| の構文の拡張について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We recommend using the various indexes to quickly locate the documentation you are looking for.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181104T144937Z" creationid="yamarten" creationdate="20181104T144937Z">
        <seg>目的の文書を素早く見つけるために、色々な索引を使うことをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When `qualid` denotes a projection, the syntax `term.(qualid)` is equivalent to `qualid term`, the syntax `term.(qualid` |arg_1| |arg_n| `)` to `qualid` |arg_1| `…` |arg_n| `term`, and the syntax `term.(@qualid` |term_1| |term_n| `)` to `@qualid` |term_1| `…` |term_n| `term`.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T200620Z" creationid="eldesh" creationdate="20191221T195318Z">
        <seg>`qualid` が射影を意味するとき、`term.(qualid)` という構文は `qualid term` と等しく、`term.(qualid` |arg_1| |arg_n| `)` は `qualid` |arg_1| `…` |arg_n| `term` と、`term.(@qualid` |term_1| |term_n| `)` という構文は `@qualid` |term_1| `…` |term_n| `term` と等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override the display format for specified types by adding entries to these tables:</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T193229Z" creationid="eldesh" creationdate="20191221T193229Z">
        <seg>これらの表にエントリを追加することで特定の型の表示形式を上書きすることが出来ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>``Structure`` is a synonym of the keyword ``Record``.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T201423Z" creationid="eldesh" creationdate="20191221T201423Z">
        <seg>``Structure`` はキーワード ``Record`` の別名です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in which case the correctness of :n:`@type₃` may rely on the instance :n:`@term₂` of :n:`@ident₂` and :n:`@term₂` may in turn depend on :n:`@ident₁`.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T191007Z" creationid="eldesh" creationdate="20191221T185905Z">
        <seg>この場合 :n:`@type₃` の正しさは :n:`@ident₂` のインスタンスである :n:`@term₂` に依存し、:n:`@term₂` は :n:`@ident₁` に依存するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>manifest) fields.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T185315Z" creationid="eldesh" creationdate="20191221T185315Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the first identifier :token:`ident` is the name of the defined record and :token:`sort` is its type.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T171245Z" creationid="eldesh" creationdate="20191221T171245Z">
        <seg>最初の識別子 :token:`ident` は定義されたレコードの名前であり、:token:`sort` はその型です。</seg>
      </tuv>
    </tu>
    <tu>
      <note>意図がちゃんとわかってない。「型検査器であり、証明アシスタントでもある」「証明アシスタントではタクティックというものを使う」の2点か？そもそもタクティックを言語と呼ぶのに違和感があるので、先を見てから戻ってきたい。</note>
      <tuv lang="EN-US">
        <seg>|Coq| also provides an interactive proof assistant to build proofs using specific programs called *tactics*.</seg>
      </tuv>
      <tuv lang="JA" changeid="yamarten" changedate="20181007T112633Z" creationid="yamarten" creationdate="20181007T101451Z">
        <seg>また、|Coq| は、 *タクティック* と呼ばれるプログラムを用いて証明を構築する、対話的証明アシスタントも提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|Gallina| is the kernel language of |Coq|.</seg>
      </tuv>
      <tuv lang="JA" changeid="eldesh" changedate="20191221T184208Z" creationid="eldesh" creationdate="20191221T184208Z">
        <seg>|Gallina| は |Coq| の核言語です。</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
